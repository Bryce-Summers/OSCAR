# version 2.3 - iteration variable is always "i"; not spec'd in each picture definition

#	The Oskar Language Project

#	Demo file #2 

#	Note:
#	There is change in the spec.: The iteration variable, instead of 
#	going from 0 to (numpix-1), it always goes from 0. to 1. in however
#	many steps is the value of numpix.


#	Function Definitions

#	Syntax for Function Definition:
#		FunName(arguments) :: standard algebraic expression that returns one value
#	
#	Using the operator "::" for "is a function defined by" to distinguish it from 
#		"<<" the picture definition operator. Both are open to alternatives.
#	This "Single-Valued Function" can be used anywhere a single value is expected.

#
#	This first example plots a cosine function along the x axis: y=f(x)

floor 	<<	cube[{1}* (2,2,.02) 		# 1. scale cube down to very thin slab on z-axis
										# and expand to twice size in x and y
										# to form background for other pics
					+ (-.5,-.5,-.05)	# 2. center in quadrant to form stage  
				]

cosine	<<	cube[{80}	
                        * (.0125, .02, .02)
                        * (.5,4,5) 		# 1. scale cube to thin vertical slab
                        + (i,cos((i*360)+($t*360)),.05)  
                                        # 2. Translation Vector (TX,TY,TZ):
                                        # TX - spread out the 80 cubes between 0. and 1.
                                        #       horizontally along the x-axis.
										# TY - cubes positioned vertically according to
										#	height of cosine function. Argument to
										#	cos function, (i*360) gives 80 values from
										#	0 to 360.  ($t*360) moves curve over time, 
										#	one complete 360 degree cycle.
										# TZ - just raises curve up off of floor.
						* (1,.5,1)		# 3. Halve the height of the curve from 2.0 to 1.0	
						+ (0,.5,0)		# 4. Move the curve up .5 to center in 1st quadrant.
				]
		
#	Command for Pic05.png

Draw [ floor, cosine ] 

	
#	The Translate vector can be simplified somewhat by defining the TY function 
#		outside the picture.

myTY1(x,time) :: cos((time*360)+(x*360))
	
cosine	<<	cube[{80}	* (.5,4,5) 				 # 1. scale cube to thin vertical slab
						+ (i, myTY1(i,$t), .05)  # 2. Now the TY parameter references the
												 # myTY1 function, with 'i' and '$t' values for
												 #	'x' and 'time.'
						* (1,.5,1)			# 3. Halve the height of the curve from 2.0 to 1.0	
						+ (0,.5,0)			# 4. Move the curve up .5 to center in 1st quadrant.
				]
				
#	The Draw command and resulting picture are the same:  Pic05.png

#	The 400-frame animation in Pic06.gif				
Draw { 0.,1.,400}[ floor, cosine ] 		# $t goes from 0. to 1. in 400 frames

#	3-Valued Vectors 
#	It might be useful to have functions that return a 3-valued vector that can be
#		used anywhere a vector is expected. perhaps with another operator, ":::" .
		Then there would be two types of functions: Single-valued and Triple-valued.
		The Vector-returning function may be defined by nothing more than three 
		SVF's together in a list.
			VecFun(arguments):::[function1 definition,
								 function2 definition,
								 function3 definition]
							 
#	Picture_Functions
#	Since we may have many other functions to be plotted, we can generalize
#		the function-drawing routine by making it a picture_function, "funplot" 
#		which takes the function to be plotted as an argument.
#	For the moment, i've introduced a new operator, "<<<" , 
#		for "is a picture_function defined by" but this may not be necessary 
#		as any picture definition that takes an argument is a picture_function.

myTY1(x,time)	::	cos((time*360)+(x*360))			# function definition
	
funplot(TYfunction)	<<<	cube[{80}	* (.5,4,5) 	  	  # 1. scale cube to thin vertical slab
						+ (i, TYfunction(i,$t), .05)  # 2. Now the TY parameter references the
													  #		the argument to the picture_function.
						* (1,.5,1)		# 3. Halve the height of the curve from 2.0 to 1.0	
						+ (0,.5,0)		# 4. Move the curve up .5 to center in 1st quadrant.
				]
			
cosine	<<	funplot(myTY1)	# now the 'cosine' picture can be defined as a 'funplot'
							# with "myTY1" as the function to be plotted.
	
#	For more flexibility, numpix could be made an argument too, in which case the 
		first line of the definition would be:
funplot(TYfunction, numpix)	<<<	cube[{numpix}	* (.5,4,5)
 
#	And the call would become:
cosine	<<	funplot(myTY1, 100)	 # 'cosine' is the function, myTY1 plotted with 100 cubes.


#	Another example of a picture_function is one that takes any picture as the Basis
#		and creates a 2-dimensional array like a wallpaper pattern.  The picture_function
#		depends on the "modulo" and "step" functions to create the array.
	
MakeArray(base=cube, rows=4, cols=2) <<< base[{numpix}
											* (1/(rows*cols))  # scale factor 1/(rows*cols)
											+ (modulo(i,cols), # tx = modulo function
											   step(i,rows),   # ty = step function
											   0) 			   # tz = no change; 2D pattern
										  ]

wallpaper << MakeArray(cosine,4,4)	# 4x4 array of the previously defined cosine picture


#	Draw wallpaper yields  Pic07.png

#	cosine functions are linking up to form continuous wave.
#	to defeat that we can add a rotation to the basis picture:

wallpaper << MakeArray(cosine[@(0,0,45)],4,4)	# 4x4 array of the previously defined cosine picture

#	now Draw wallpaper yields  Pic08.png





